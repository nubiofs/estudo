# - (Referencia Banco Postgresql):
#
# https://hub.docker.com/_/postgres/
#
# - (Execução do Serviço):
#
# $ docker container prune 
#
# $ mkdir -pv ~/teste/postgres/data
#
# ***
# $ docker run -v ~/teste/postgres/data:/var/lib/postgresql/data --rm --name some-postgres -e POSTGRES_PASSWORD=postgres -d postgres
# ***
#
# - (Criação do metadados - Apenas na primeira vez da instanciação do container):
#
# $ docker run -e PGPASSWORD="postgres" -it --rm --link some-postgres:postgres postgres psql -h postgres -U postgres
#
# postgres=# CREATE USER test; ALTER USER test WITH PASSWORD 'passwd'; CREATE DATABASE testdb; GRANT ALL PRIVILEGES ON DATABASE testdb TO test;
#
# ### postgres=# CREATE TABLE public.people (id Bigserial PRIMARY KEY NOT NULL, first_name VARCHAR(20), last_name VARCHAR(20)); ALTER TABLE "public"."people" OWNER TO test;
# ### postgres=# SET enable_seqscan=off;???
# ### postgres=# \l \d \d people
#
# - (Obtendos dados conexão base Postgres):
#
# $ docker container inspect 24ebe8a34b89
#
# .. "IPAddress": "172.17.0.2"
#
# - (Consultas aos dados):
#
# $ docker run -e PGPASSWORD="passwd" -it --rm --link some-postgres:postgres postgres psql -h postgres -d testdb -U test
#
# testdb=# select * from people;
#
# testdb=> \d
#                    List of relations
# Schema |             Name             |   Type   | Owner 
#--------+------------------------------+----------+-------
# public | batch_job_execution          | table    | test
# public | batch_job_execution_context  | table    | test
# public | batch_job_execution_params   | table    | test
# public | batch_job_execution_seq      | sequence | test
# public | batch_job_instance           | table    | test
# public | batch_job_seq                | sequence | test
# public | batch_step_execution         | table    | test
# public | batch_step_execution_context | table    | test
# public | batch_step_execution_seq     | sequence | test
# public | people                       | table    | test
# public | people_id_seq                | sequence | test
#(11 rows)
#
# testdb=> select job_execution_id, start_time, status from batch_job_execution;
# testdb=> select job_instance_id, job_name from batch_job_instance;	
# testdb=> select * from batch_job_execution_params;
#
# - (pgAdm):
# -> https://hub.docker.com/r/dpage/pgadmin4/
#
# ***
# $ docker run -p 80:80 \
#-e "PGADMIN_DEFAULT_EMAIL=user@domain.com" \
#-e "PGADMIN_DEFAULT_PASSWORD=SuperSecret" \
#-d dpage/pgadmin4
# ***
#
# $ docker container inspect 24ebe8a3fdkjsdk
#
# .. "IPAddress": "172.17.0.4"
#
# -> http://172.17.0.4/login?next=%2F
#
# EMAIL=user@domain.com
# PASSWORD=SuperSecret
#
# Host: 172.17.0.2
# Port: 5432
# Maintenance database: postgres
# Username: test
# password: passwd
#
# - (Referencia Banco h2):
#
# https://hub.docker.com/r/1000kit/h2/
#
# $ mkdir -pv ~/teste/h2/data
# $ docker run -v ~/teste/h2/data:/opt/h2-data -it 1000kit/h2
#
# -> http://172.17.0.4:8181
#
# Extrar ver:
#https://stackoverflow.com/questions/9736085/run-a-postgresql-sql-file-using-command-line-arguments
#
# Ver todas as propriedades do spring em (Appendix A. Common application properties):
#https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html

## Spring DATASOURCE "DataSourceAutoConfiguration" & DataSourceProperties
#spring.datasource.url=jdbc:postgresql://172.17.0.2:5432/testdb
#spring.datasource.username=test
#spring.datasource.password=passwd
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.initialization-mode=embedded

# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# Hibernate ddl auto (create, create-drop, validate, update)
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=create-drop

#
####spring batch specific properties "BatchAutoConfiguration"########
#
spring.batch.job.enabled=false
# Apenas na primeira execução para criação dos metadados do spring-batch:
#spring.batch.initialize-schema=always
spring.batch.initialize-schema=embedded
spring.batch.schema=classpath:org/springframework/batch/core/schema-postgresql.sql