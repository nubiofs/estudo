$ cd estudo.git/SpringBatch/outros/infra-batch/workspace/infra-batch-master/infra-batch/infra-batch-sample

$ ~/mvn eclipse:eclipse

- No Eclipse, workspace "estudo.git/SpringBatch/outros/infra-batch/workspace":
 
-> "Import Existing Maven Project"

- Mudar para Java 1.8

- Colocar no pom.xml:

<!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
	<dependency>
		<groupId>org.postgresql</groupId>
		<artifactId>postgresql</artifactId>
		<version>9.4.1212.jre7</version>
	</dependency>
	<dependency>
        	<groupId>com.oracle</groupId>
        	<artifactId>ojdbc6</artifactId>
        	<scope>provided</scope>
      	</dependency>

Obs.: https://jdbc.postgresql.org/download.html

- Criar/colocar arquivo "settings.xml" no diretorio ~/.m2 :

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<settings>
	
   <offline>false</offline>  

    <profiles>
	    <profile>
		    <id>repositorio-nexus</id>
		    <repositories>
		        <repository>
		            <id>nexus.aic.serpro</id>
		            <name>Nexus AIC Serpro</name>
		            <url>http://nexus.aic.serpro/content/groups/public</url>
		        </repository>
			<repository>
			    <id>demoiselle.release</id>
			    <url>http://demoiselle.c3sl.ufpr.br/maven/repository/release</url>
			</repository>

		    </repositories>
	    </profile>
    </profiles>
    
    <activeProfiles>
        <activeProfile>repositorio-nexus</activeProfile>
    </activeProfiles>
    
</settings>

$ ~/mvn clean package

* (Execução no Eclipse) Run As -> Run Configuration -> New "Java Aplication", com:

- Aba 'Main'

Project = infra-batch-sample
Main Class = br.gov.serpro.supde.infra.batch.core.launch.InfraJobRunner

- Aba 'Arguments'

Program Arguments = sample-jobs/sampleCSV-job.xml sampleCSVJob

ou

Program Arguments = sample-jobs/sampleJSON-job.xml sampleJSONJob

VM Arguments = -Dinfra.config.dir=/home/02963357460/estudo.git/SpringBatch/outros/infra-batch/workspace/infra-batch-master/infra-batch/infra-batch-sample/src/main/resources/configs -Dinfra.verbose=true

ou

-Dinfra.config.dir=/media/sf_compartilhamento/workspace/infra-batch-sample/src/main/resources/configs -Dinfra.verbose=true

* (Execução no prompt)

Obs.: 

1) No pgAdmin -> new Database "batch"
2) Rodar no pgAdmin (projeto "spring-batch-core"):

/org/springframework/batch/core/schema-postgresql.sql

3) No pgAdmin (criar tabelas de negócio):

-- Table: public.experience

-- DROP TABLE public.experience;

CREATE TABLE public.experience
(
  id bigint NOT NULL,
  name character varying(255) DEFAULT NULL::character varying,
  country character varying(100) DEFAULT NULL::character varying,
  birthdate character varying(255),
  company character varying(255),
  depto character varying(255) DEFAULT NULL::character varying,
  CONSTRAINT experience_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.experience
  OWNER TO "user";

-- Table: public.product

-- DROP TABLE public.product;

CREATE TABLE public.product
(
  id bigint NOT NULL,
  name character varying(100) DEFAULT NULL::character varying,
  brand character varying(100) DEFAULT NULL::character varying,
  type character varying(50),
  price integer,
  warranty_years integer,
  available boolean,
  description character varying(4000) DEFAULT NULL::character varying,
  CONSTRAINT product_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.product
  OWNER TO "user";

$ cd estudo.git/SpringBatch/outros/infra-batch/workspace/infra-batch-master/infra-batch/infra-batch-sample

Obs.:

$ mkdir -p /opt/infra-batch/output/monitoring

ou colocar em "infra-batch.proterties":

#Ignorar a criacao do relatorio no infra
infra.ignoreReport=true
infra.ignorePDFReport=true

$ java -Dinfra.config.dir=/home/02963357460/estudo.git/SpringBatch/outros/infra-batch/workspace/infra-batch-master/infra-batch/infra-batch-sample/src/main/resources/configs -jar target/infra-batch-sample-3.0.1-executable.jar sample-jobs/sampleCSV-job.xml sampleCSVJob  -report

Obs.: ou

$ java -Dinfra.config.dir=/media/sf_compartilhamento/infra-batch-sample/src/main/resources/configs -jar target/infra-batch-sample-3.0.1-executable.jar sample-jobs/sampleCSV-job.xml sampleCSVJob  -report

xxxxxxxxxxxxxxxxxx
xxxxxxxxx temps

	<!-- teste mais -->
 	<!-- database -->
    <beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.postgresql.Driver" />
        <property name="url" value="jdbc:postgresql://localhost:5432/batch" />
        <property name="username" value="postgres" />
        <property name="password" value="post" />
    </beans:bean>
    <!-- transaction manager -->
    <beans:bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />
    <!-- create job-meta tables automatically -->
    <jdbc:initialize-database data-source="dataSource">
        <jdbc:script location="org/springframework/batch/core/schema-drop-postgresql.sql" />
        <jdbc:script location="org/springframework/batch/core/schema-postgresql.sql" />
    </jdbc:initialize-database>
	<!-- teste menos -->

xxxxxxxxxxXXXXXXXXXXXX
xxxxxxxxx EXTRAS 

FONTE (http://stackoverflow.com/questions/10174898/how-to-check-whether-a-given-string-is-valid-json-in-java):

Google GSON option

Another option is to use Google Gson. Import the dependency:

<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.5</version>
</dependency>

Again, you can implement the proposed solution as:

import com.google.gson.Gson;

public final class JSONUtils {
  private static final Gson gson = new Gson();

  private JSONUtils(){}

  public static boolean isJSONValid(String jsonInString) {
      try {
          gson.fromJson(jsonInString, Object.class);
          return true;
      } catch(com.google.gson.JsonSyntaxException ex) { 
          return false;
      }
  }
}

A simple test follows here:

//A valid JSON String to parse.
String validJsonString = "{ \"developers\": [{ \"firstName\":\"Linus\" , \"lastName\":\"Torvalds\" }, " +
        "{ \"firstName\":\"John\" , \"lastName\":\"von Neumann\" } ]}";

// Invalid String with a missing parenthesis at the beginning.
String invalidJsonString = "\"developers\": [ \"firstName\":\"Linus\" , \"lastName\":\"Torvalds\" }, " +
        "{ \"firstName\":\"John\" , \"lastName\":\"von Neumann\" } ]}";

boolean firstStringValid = JSONUtils.isJSONValid(VALID_JSON_STRING); //true
boolean secondStringValid = JSONUtils.isJSONValid(NOT_VALID_JSON_STRING); //false

Please, observe that there could be a "minor" issue due to trailing commas that will be fixed in release 3.0.0.


--
----



With Google Gson you can use JsonParser:

import com.google.gson.JsonParser;

JsonParser parser = new JsonParser();
parser.parse(json_string); // throws JsonSyntaxException


---

 34
down vote
	

JACKSON Library

One option would be to use Jackson library. First import the latest version (now is):

<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.7.0</version>
</dependency>

Then, you can implement the correct answer as follows:

import com.fasterxml.jackson.databind.ObjectMapper;

public final class JSONUtils {
  private JSONUtils(){}

  public static boolean isJSONValid(String jsonInString ) {
    try {
       final ObjectMapper mapper = new ObjectMapper();
       mapper.readTree(jsonInString);
       return true;
    } catch (IOException e) {
       return false;
    }
  }
}

==
==
Processando Json:

http://stackoverflow.com/questions/18421674/using-gson-to-parse-a-json-array
http://stackoverflow.com/questions/18544133/parsing-json-array-into-java-util-list-with-gson
http://stackoverflow.com/questions/18993414/using-gson-to-parse-json-object-vs-json-array
http://stackoverflow.com/questions/5490789/json-parsing-using-gson-for-java

http://www.javacreed.com/simple-gson-example/
https://www.mkyong.com/java/how-do-convert-java-object-to-from-json-format-gson-api/

http://www.jsonschema2pojo.org/
https://github.com/joelittlejohn/jsonschema2pojo

-- TUTORIAL

https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization
https://futurestud.io/tutorials/gson-advanced-generics

----------------
--- OUTROS VARIOS

Map<String, String> map = new HashMap<String, String>();
map.put("1", "Jan");
map.put("2", "Feb");
map.put("3", "Mar");

//loop a Map
for (Map.Entry<String, String> entry : map.entrySet()) {
	System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
}



// JSON to JsonElement, convert to String later.
JsonElement json = gson.fromJson(new FileReader("D:\\file.json"), JsonElement.class);
    String result = gson.toJson(json);
    
xxxxxxx

Convert a JSON to a Map

String json = "{\"name\":\"mkyong\", \"age\":33}";
Map<String, Object> map = gson.fromJson(json, new TypeToken<Map<String, Object>>(){}.getType());
map.forEach((x,y)-> System.out.println("key : " + x + " , value : " + y));    

xxxxxxxxxx
(https://futurestud.io/tutorials/gson-mapping-of-arrays-and-lists-of-objects)

public class Founder {  
    String name;
    int flowerCount;
}


- [Arrays]

String founderJson = "[{'name': 'Christian','flowerCount': 1}, {'name': 'Marcus', 'flowerCount': 3}, {'name': 'Norman', 'flowerCount': 2}]";

Gson gson = new Gson();  
Founder[] founderArray = gson.fromJson(founderJson, Founder[].class); 

- [Lists]

String founderJson = "[{'name': 'Christian','flowerCount': 1}, {'name': 'Marcus', 'flowerCount': 3}, {'name': 'Norman', 'flowerCount': 2}]";

Gson gson = new Gson();

Type founderListType = new TypeToken<ArrayList<Founder>>(){}.getType();

List<Founder> founderList = gson.fromJson(founderJson, founderListType);   

- [Lists as Part of an Object]

public class GeneralInfo {  
    String name;
    String website;
    List<Founder> founders;
}

String generalInfoJson = "{'name': 'Future Studio Dev Team', 'website': 'https://futurestud.io', 'founders': [{'name': 'Christian', 'flowerCount': 1 }, {'name': 'Marcus','flowerCount': 3 }, {'name': 'Norman','flowerCount': 2 }]}";

Gson gson = new Gson();

GeneralInfo generalInfoObject = gson.fromJson(generalInfoJson, GeneralInfo.class);  

- [Lists Nested in Lists]

public class GeneralInfo {  
    String name;
    String website;
    List<FounderWithPets> founders;
}

public class FounderWithPets {  
    String name;
    int flowerCount;
    List<Pet> pets;
}

public class Pet {  
    String name;
    List<Toy> toys;
}

--

String founderJson = "[{'name': 'Christian','flowerCount': 1}, {'name': 'Marcus', 'flowerCount': 3}, {'name': 'Norman', 'flowerCount': 2}]";

Gson gson = new Gson();

Type founderSetType = new TypeToken<HashSet<Founder>>(){}.getType();

HashSet<Founder> founderSet = gson.fromJson(founderJson, founderSetType);  


====


public class Box<T> {  
    private T boxContent;

    public Box(T t) {
        this.boxContent = t;
    }
}


Gson gson = new Gson();

Box<String> stringBox = new Box<>("String Type");  
Box<Integer> integerBox = new Box<>(42);  
// the class UserDate is from previous guides (https://futurestud.io/blog/gson-builder-formatting-of-dates-custom-date-time-mapping/)
Box<UserDate> complexBox = new Box<>(new UserDate("Norman", "norman@fs.io", 26, true));

Type stringType = new TypeToken<Box<String>>() {}.getType();  
Type integerType = new TypeToken<Box<Integer>>() {}.getType();  
Type complexType = new TypeToken<Box<UserDate>>() {}.getType();

E

String complexGenericJson = "{\"boxContent\":{\"_name\":\"Norman\",\"age\":26,\"email\":\"norman@fs.io\",\"isDeveloper\":true,\"registerDate\":\"Jun 7, 2016 7:15:29 AM\"}}";

Type complexType = new TypeToken<Box<UserDate>>() {}.getType();

Gson gson = new Gson();  
Box boxWithData = gson.fromJson(complexGenericJson, complexType);  
Box<UserDate> boxWithoutData = gson.fromJson(complexGenericJson, Box.class);  


