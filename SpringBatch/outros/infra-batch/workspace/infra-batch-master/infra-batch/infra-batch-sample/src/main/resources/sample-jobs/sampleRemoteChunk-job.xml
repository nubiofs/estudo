<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">

	<!-- Exemplo de um Job que executa o "Process" de um step de forma distribuída. 
		O "Reader" e o "Writer" são executados na máquina master.
		Para iniciar uma máquina escrava é necessário passar o parâmetro -Dinfra.slave=true -->

	<beans:import
		resource="classpath:/spring/context/infra/batch/infra-batch-context.xml" />

	<!-- Ao importar o remote-chunking-context.xml, o step com o id = "remoteChunkingStep" 
		executará o "process" de forma distribuída (reader e writer são executados 
		no Master) -->

	<beans:import
		resource="classpath:/spring/context/infra/batch/remote-chunking-context.xml" />
		
	<!-- É Necessário importar um contexto que possua uma jmsConnectionFactory para acessar as filas.
		Lembrar de adicionar nas dependências do projeto, as libs necessárias para o client do provedor de JMS.
		(ex: jms-hornetq-context.xml ou jms-activemq-context.xml, etc) -->
	
	<beans:import
		resource="classpath:/spring/context/infra/batch/jms-hornetq-context.xml" />

	<batch:job id="sampleRemoteChunkJob" parent="infraParentJob">
		<batch:step id="step1" parent="infraParentStep" next="remoteChunkingStep">
			<batch:tasklet ref="sampleTasklet" />
		</batch:step>
		<batch:step id="remoteChunkingStep" parent="infraParentChunkedStep">
			<batch:tasklet task-executor="syncTaskExecutor">
				<batch:chunk reader="sampleJDBCReader" processor="sampleProcessor"
					writer="sampleWriter" commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<beans:bean name="sampleTasklet"
		class="br.gov.serpro.supde.infra.batch.sample.SampleTasklet" />

	<beans:bean id="sampleJDBCReader"
		class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="sql">
			<beans:value>
			<![CDATA[
				SELECT id, name, country, birthdate, company, depto, extra 
				FROM experience
				WHERE id <= 1000
				ORDER BY ID
			]]>
			</beans:value>
		</beans:property>
		<beans:property name="rowMapper">
			<beans:bean
				class="br.gov.serpro.supde.infra.batch.sample.domain.ExperienceRowMapper" />
		</beans:property>
	</beans:bean>

	<beans:bean id="sampleProcessor"
		class="br.gov.serpro.supde.infra.batch.sample.SampleProcessor" />

	<beans:bean id="sampleWriter"
		class="br.gov.serpro.supde.infra.batch.sample.SampleWriter" />

</beans:beans>