<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">

	<!-- Exemplo de um Job que executa dois steps distintos em paralelo. O step 
		file2MemoryQueue, executado em uma única thread, lê de um arquivo CSV e escreve 
		em uma fila em memória. O step memoryQueue2Database, executado em várias 
		threads, lê da fila em memória e escreve no banco de dados -->

	<beans:import
		resource="classpath:/spring/context/infra/batch/infra-batch-context.xml" />

	<batch:job id="sampleQueueParallelStepJob" parent="infraParentJob"
		restartable="false">
		<batch:split id="split1" task-executor="simpleAsyncTaskExecutor">
			<batch:flow>
				<batch:step id="file2MemoryQueue">
					<batch:tasklet task-executor="syncTaskExecutor">
						<batch:chunk reader="sampleCSVReader" writer="memoryQueueWriter"
							commit-interval="50" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="memoryQueue2Database">
					<batch:tasklet task-executor="threadPoolTaskExecutor">
						<batch:chunk reader="memoryQueueReader" writer="sampleDatabaseWriter"
							commit-interval="100" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
		</batch:split>
	</batch:job>

	<beans:bean id="memoryQueue" class="java.util.concurrent.LinkedBlockingQueue" />

	<beans:bean id="memoryQueueReader"
		class="br.gov.serpro.supde.infra.batch.core.concurrent.BlockingQueueReader">
		<beans:property name="queue" ref="memoryQueue" />
		<beans:property name="timeout" value="500" />
	</beans:bean>

	<beans:bean id="memoryQueueWriter"
		class="br.gov.serpro.supde.infra.batch.core.concurrent.BlockingQueueWriter">
		<beans:property name="queue" ref="memoryQueue" />
		<beans:property name="timeout" value="500" />
	</beans:bean>

	<beans:bean name="experienceLineMapper"
		class="br.gov.serpro.supde.infra.batch.core.support.CSVLineMapper">
		<beans:property name="fieldSetMapper">
			<beans:bean
				class="br.gov.serpro.supde.infra.batch.sample.domain.ExperienceFieldSetMapper" />
		</beans:property>
	</beans:bean>

	<beans:bean name="sampleCSVReader"
		class="br.gov.serpro.supde.infra.batch.core.support.CSVFileItemReader">
		<beans:property name="lineMapper" ref="experienceLineMapper" />
		<!-- <beans:property name="resource" value="file:#{infraJobContext.inputPath}/experience.csv"/> -->
		<beans:property name="resource"
			value="classpath:/sampleJob_input/experience.csv" />
	</beans:bean>

	<beans:bean id="sampleDatabaseWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="sql">
			<beans:value>
            <![CDATA[            	
            	INSERT INTO experience2(id, name, country, birthdate, company, depto) 
				VALUES (:id, :nome, :pais, :dataNascimento, :empresa, :departamento)
            ]]>
			</beans:value>
		</beans:property>
		<beans:property name="itemSqlParameterSourceProvider">
			<beans:bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</beans:property>
	</beans:bean>

</beans:beans>