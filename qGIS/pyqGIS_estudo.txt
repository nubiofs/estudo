https://docs.qgis.org/3.4/pdf/pt_BR/
https://qgis.org/pyqgis/3.6/
https://qgis.org/api/
https://plugins.qgis.org/
https://docs.qgis.org/3.7/C/docs/user_manual/plugins/python_console.html
https://docs.qgis.org/testing/en/docs/user_manual/plugins/python_console.html

==> https://github.com/g-sherman/Qgis-Plugin-Builder
==> http://g-sherman.github.io/Qgis-Plugin-Builder/
==> https://plugins.qgis.org/plugins/pluginbuilder3/

--> http://www.qgistutorials.com/pt_BR/docs/getting_started_with_pyqgis.html
--> http://www.qgistutorials.com/pt_BR/docs/building_a_python_plugin.html
--> http://www.qgistutorials.com/pt_BR/docs/using_plugins.html

++> https://2engenheiros.com/2018/07/17/criar-plugin-para-qgis-parte1/
++> https://2engenheiros.com/2018/07/24/criar-plugin-para-qgis-parte2/

https://doc.qt.io/qtcreator/index.html

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
(https://docs.qgis.org/3.4/pdf/pt_BR/QGIS-3.4-PyQGISDeveloperCookbook-pt_BR.pdf)

qGIS -> Plugins → Python Console menu:
Plugins ‣ Python Console (Ctrl+Alt+P).

# For interaction with the QGIS environment,  there is a iface variable,  which is an instance of QgisInterface.  
# This interface allows access to the map canvas, menus, toolbars and other parts of the QGIS application.
'''
from qgis.core import *
import qgis.utils
# The 'qgis.gui' module brings various GUI components
'''
>>> layer = qgis.utils.iface.activeLayer()
>>> # name = layer.id()
>>> mc = qgis.utils.iface.mapCanvas()
>>> current = mc.currentLayer()
>>> name = current.name()
>>> value = layer.featureCount()
>>> qgis.utils.iface.mapCanvas().setSelectionColor( QColor("red") )
>>> if value == 1:
...	currentLayer.select(0)
>>> qgis.utils.iface.messageBar().pushMessage("The layer '{}' featureCount is {}!".format(name, value))
>>> currentLayer.removeSelection()


xxxxxxxxxxxxxxxxxx OK !!! FUNCIONAR !!!

layer = qgis.utils.iface.activeLayer()
crsSrc = QgsCoordinateReferenceSystem(4326, QgsCoordinateReferenceSystem.EpsgCrsId)
qgis.core.QgsVectorFileWriter.writeAsVectorFormat(layer, "/root/workspace/teste_agora_layer.json", "utf-8", crsSrc, "GeoJSON")
xxxxxxxxxxxxxxxxxx


>>> qgis.core.QgsJsonUtils.exportAttributes(selected_features[0])

layer = qgis.utils.iface.activeLayer()
# layer.selectAll() # usar "Select Features by Polygon" ou "Select Features using an expression"
selected_features = layer.selectedFeatures()
for i in selected_features:
	# attrs = i.attributeMap()
	# i.fields().names()  ==> ['ID_LOTE_CT', 'NULOTCTM', 'ID_QUADRA_']
	# print(...	i['ID_LOTE_CT']	i['NULOTCTM']	i['ID_QUADRA_']
	#
	# ==> i.hasGeometry()
	# ==> i.geometry()
	#
	# ==> i.geometry().asJson()
	#
	# ==> VER: 	dir(i.geometry())
	# ==> i.geometry().type()
	# ==> i.geometry().area()
	#
	# ==> i.__geo_interface__ ####  # GeoJSON attributes of a feature ####
	# ==> s = str(i.__geo_interface__)
	# ==> s.replace("'", "\"")
	#
	attrs = i.attributes()
	# l = i.fields().toList()
	# l[0].displayName()
	# l[0].__doc__
	# for (k, attr) in attrs.iteritems():
	for (k, attr) in enumerate(attrs):
		print("%d: %s", k, attr)



def mapping_feature(feature):
	i = feature
	geom = feature.geometry() # Para uma unica geometria
	'''
	properties = {}
	fields = [field.name() for field in feature.fields()]
	properties = dict(zip(fields, feature.attributes()))
	'''
	# qgis.core.QgsJsonUtils.encodeValue(i.__geo_interface__)
	s = str(i.__geo_interface__)
	geo = s.replace("'", "\"")
	# print("{}{}type{} : {}FeatureCollection{}{} {}features{} : [{}]{}".format("{", "\"", "\"", "\"", "\"", ",", "\"", "\"", geo, "}"))	
	return { "type" : "FeatureCollection", "features" : [ geo ] }



from qgis.core import Qgis
qgis.utils.iface.messageBar().pushMessage("Error", "I'm sorry Dave, I'm afraid I can't do that", level=Qgis.Critical, duration=3) # 3 segundos
'''
0.  Info
1.  Warning
2.  Critical # Qgis.Critical
3.  Success
'''


def showError():
	pass
widget = iface.messageBar().createMessage("Missing Layers", "Show Me")
button = QPushButton(widget)
button.setText("Show Me")
button.pressed.connect(showError)
widget.layout().addWidget(button)
iface.messageBar().pushWidget(widget, Qgis.Warning)
	


# currentLayer.sourceCrs().toWkt()
# currentLayer.sourceCrs().authid()
# 
#
# dir(currentLayer.getFeatures())
# dir(currentLayer)
# print(currentLayer.source())
# print(currentLayer.featureCount())
# dir(currentLayer.fields())
# print(currentLayer.fields().names())
# lista = currentLayer.fields().toList()
# print(lista)
# lista[0].length()
# lista[0].name()
# dir(currentLayer.sourceCrs())
# currentLayer.sourceCrs().srsid()
##
# if currentLayer is None:
	raise QgsProcessingException(self.invalidSourceError(parameters, self.INPUT))
# Update the progress bar:
# feedback.setProgress(int(current * total))

# obtain the layer tree of the top-level group in the project
layerTree = qgis.utils.iface.layerTreeCanvasBridge().rootGroup()
layerTree.isVisible()
layerTree.layerOrder()[0].id()

for field in currentLayer.fields():
	print(field.name(), field.typeName())

for f in currentLayer.getFeatures():
	#print(f['name'])
	print(f.geometry())
	print(f.attributes()) # lista com os valores para cada tipo de atributo
	print(f.geometry().type()) # QgsWkbTypes.PointGeometry, QgsWkbTypes.LineGeometry, QgsWkbTypes.PolygonGeometry, 
	if QgsWkbTypes.isSingleType(f.geometry().wkbType()):
		print( ... # f.geometry().asPoint(), f.geometry().asPolyline(), f.geometry().asPolygon()
		print("singleType")
	else:
		print( ... # f.geometry().asMultiPoint(), f.geometry().asMultiPolyline(), f.geometry().asMultiPolygon()
		# for "Polygon" -> f.geometry().area()


OBS.:

gPnt.wkbType() == QgsWkbTypes.Point
# output: True
gLine.wkbType() == QgsWkbTypes.LineString
# output: True
gPolygon.wkbType() == QgsWkbTypes.Polygon
# output: True
gPolygon.wkbType() == QgsWkbTypes.MultiPolygon
# output: False



qgis.utils.iface.mapCanvas().setSelectionColor( QColor("red") )

res = layer.dataProvider().addAttributes([QgsField("mytext", QVariant.String), QgsField("myint", QVariant.Int)])

attrs = { 0 : "hello", 1 : 123 }
# fid = 100 (ID of the feature we will modify):
layer.dataProvider().changeAttributeValues({ fid : attrs })

# update an attribute with given field index (int) to a given value
layer.changeAttributeValue(fid, fieldIndex, value)
# add new field
layer.addAttribute(QgsField("mytext", QVariant.String))

feat.setAttributes([0, 'hello'])
feat.setAttribute('name', 'hello')


====> layer.updateFields()


from qgis.PyQt.QtCore import QVariant
# create layer
vl = QgsVectorLayer("Point", "temporary_points", "memory")
pr = vl.dataProvider()
# add fields
pr.addAttributes([QgsField("name", QVariant.String),
	QgsField("age",  QVariant.Int),
	QgsField("size", QVariant.Double)])
vl.updateFields() # tell the vector layer to fetch changes from the provider

# add a feature
fet = QgsFeature()
fet.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(10,10)))
fet.setAttributes(["Johny", 2, 0.3])
pr.addFeatures([fet])
# update layer's extent when new features have been added
# because change of extent in provider is not propagated to the layer
vl.updateExtents()

# show some stats
print("fields:", len(pr.fields()))
print("features:", pr.featureCount())
e = vl.extent()
print("extent:", e.xMinimum(), e.yMinimum(), e.xMaximum(), e.yMaximum())


** (PARA GUI VER): PAGINA 36 (Chapter 5. Usando Camadas Vetor) DE "https://docs.qgis.org/3.4/pdf/pt_BR/QGIS-3.4-PyQGISDeveloperCookbook-pt_BR.pdf":

from qgis.gui import
QgsRendererWidget, QgsColorButton
class RandomRendererWidget(QgsRendererWidget):


...


obs.:

1)

>>> exec(open('/root/workspace/estudo-001.py'.encode('utf-8')).read())

Ctrl+Shift+Space to view the command history: double-clicking a row will execute the command.

2)

Every time QGIS starts, the user’s Python home directory
•  Linux:
.local/share/QGIS/QGIS3

# startup.py
# PYQGIS_STARTUP # environment variable to an existing Python file "startup.py"

>>> QStandardPaths.standardLocations(QStandardPaths.AppDataLocation)
['/root/.local/share/QGIS/QGIS3', '/usr/local/share/QGIS/QGIS3', '/usr/share/QGIS/QGIS3']


==> /root/.local/share/QGIS/QGIS3/profiles/default/processing/scripts

