c(xm, mean(x, trim = 0.10))
x
xm
sum(x)
length(x)
105/12
mean(x, trim = 0.10)
mean(x)
mean(x, trim = 0.10)
x <- 1:10
x
median(x)
data.frame()
help.start()
name <- c("Ana", "Joao", "Maria")
name
name
age <- c("20", "47", "29")
age
child <- c(FALSE, TRUE, TRUE)
child
df <- data.frame(name, age, child)
df
df
df
names(df) <- c("Name", "Age", "Child")
df
names
cardapio <- c("Entrada", "Prato Principal", "Sobremesa")
cardapio
precos <- c(10.00, 20.00, 5.00)
precos
Total <- data.frame(Cardápio = cardapio, Preços = precos)
Total
dias <- c(6, 6, 6)
dias
list(cardapio, precos, dias)
novo <- list(cardapio, precos, dias)
novo
TotalNovo <- data.frame(Cardápio = cardapio, Preços = precos, Dias = dias)
TotalNovo
TotalVer <- data.frame(novo)
TotalVer
str(Total)
Total
str(Total)
df <- data.frame(name, age, child, stringsAsFactors = FALSE)
DF
df
str(df)
df <- data.frame(name, age, child, stringsAsFactors = TRUE)
str(df)
df <- data.frame(name, age, child, stringsAsFactors = FALSE)
str(df)
library()
install.packages("tidyverse")
library(tidyverse)
library("tidyverse")
library()
library("tidyverse")
library(tidyverse)
library(gglot2)
tidyr::
tidy_verse_update()
verse_update()
fligner.test()
dplyr::mutate()
tidyverse_update()
devtools::session_info(c("tidyverse"))
quit()
?sqrt
library(stats)
library(help = "stats")
?plot
plot(1:10)
x  <- plot(1:10)
x
x <- 1:10
x
(x)
plot(x)
x[1]
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
x[1]
x[1]
library()
library(ggplot2)
search()
library(help = "ggplot2")
help.search(ggplot2)
help.search("ggplot2")
library(help = "ggplot2")
seq(1, 50, 5)
seq(3, 15, 2)
seq(1, 50, 2)
seq(1, 50, 2)
?seq
rep(1)
rep(1:5,2)
x <- runif(1, 5, 5)
x
x <- runif(5, 1, 10)
x
x <- runif(5, 1, 5)
x
summary(x)
summary(sort(x))
x <- sort(x)
x
800/1000
1/9
runif()
seq(0, 1, 0.1)
x <- seq(0, 1, 0.1)
x <- sort(x)
x
runif(x, 0, 1)
plot(runif(x, 0, 1))
plot(sort(runif(x, 0, 1)))
x <- rnorm(60, 30, 3)
plot(x)
x
plot(sort(x))
x <- rnorm(6, 4, 1)
x
range(x)
rank(x)
sort(x)
nchar(x)
sum(x)
sum(x)/6
summary(x)
mean(x)
median(sort(x))
class(x)
str(x)
var(x)
quantile(x)
x <- c(1,2,3)
y <- c(4,5,6)
list(x,y)
list(x,y,y)
x <- matrix(1:50, nrow = 10, ncol = 2)
x
x <- matrix(1:10, nrow = 2)
x
x <- matrix(1:10, nrow = 2, byrow = TRUE)
X
x
x <- matrix(1:10, nrow = 2, byrow = TRUE)
x
x <- matrix(1:50, nrow = 10, ncol = 2, byrow = TRUE)
X
x
array(1:10,dim = 2)
x <- 1:5
y <- 6:10
corr(x, y)
?corr
??corr
boot::corr(x, y)
//
install.packages(rJava)
install.packages("rJava")
?rJava
??rJava
library(help = "rJava")
help.search("rJava")
library()
detach("package:ggplot2", unload=TRUE)
install.packages("xlsxjars")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
Sys.getenv('JAVA_HOME')
Sys.getenv('LD_LIBRARY_PATH')
}
iris
data("iris")
iris
plot(iris)
q()
install.packages("rJava")
q()
install.packages("rJava")
install.packages("rJava")
q()
install.packages("rJava")
q()
install.packages("rJava")
library()
library(help = "rJava")
help.search(rJava)
help.search("rJava")
install.packages("xlsxjars")
install.packages("xlsx")
write.xlsx(x)
write.xlsx(x, 'teste')
library("xlsx")
x <- data.frame(Um = 1:10, Dois = 2:20)
x <- data.frame(Um = c(1:10), Dois = c(2:20))
x <- data.frame(c(1:10), c(2:20))
um <- 1:10
um
dois <- 2:20
x <- data.frame(Um = um, Dois = dois)
x <- data.frame(um, dois)
data.frame(um, dois)
dois <- seq(2, 20, 2)
dois
data.frame(um, dois)
x <- data.frame(Um = um, Dois = dois)
x
um <- 1:10
length(um) == length(dois)
if (length(um) == length(dois)) {
(data.frame(Um = um, Dois = dois))
}
q()
setwd("~/Desenvolvimento/estudos.git/CienciasDosDados/pos-ver")
factorial(1)
factorial(0)
source(factorial)
args(factorial)
search(factorial)
help(factorial)
#3.e) Plote um gráfico de barras para o parâmetro Averageprice.
dim(averagePrice)
#3.e) Plote um gráfico de barras para o parâmetro Averageprice.
dim(averagePrice)
#03) Para o dataset "avocado.csv -> Dados históricos sobre preços de abacate
#e volume de vendas em vários mercados dos EUA", faça o que se pede:
avocado_prices = read.csv(file = "avocado.csv", header = TRUE, sep = ",")
head(avocado_prices)
averagePrice = avocado_prices$AveragePrice
#3.e) Plote um gráfico de barras para o parâmetro Averageprice.
dim(averagePrice)
#3.e) Plote um gráfico de barras para o parâmetro Averageprice.
class(averagePrice)
#3.e) Plote um gráfico de barras para o parâmetro Averageprice.
is.vector(averagePrice)
#3.e) Plote um gráfico de barras para o parâmetro Averageprice.
length(averagePrice)
#3.e) Plote um gráfico de barras para o parâmetro Averageprice.
qtd_averagePrice = tapply(rep(1, length(averagePrice)), averagePrice, sum)
barplot(qtd_averagePrice, xlab = "Average Price", ylab = "Frequência")
#3.f) Plote um gráfico de pizza para o parâmetro year.
qtd_year = tapply(rep(1, length(year)), year, sum)
pie(qtd_year)
#3.f) Plote um gráfico de pizza para o parâmetro year.
qtd_year = tapply(rep(1, length(year)), year, sum)
year = avocado_prices$year
#3.f) Plote um gráfico de pizza para o parâmetro year.
qtd_year = tapply(rep(1, length(year)), year, sum)
pie(qtd_year)
library("rJava", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("xlsx", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("xlsxjars", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
# 6)
qtdItensVendidos = read.xlsx("restaurante.xlsx", 1)
View(qtdItensVendidos)
median(qtd_averagePrice$Quantidade)
(qtdItensVendidos)
median(qtdItensVendidos$Quantidade)
median(qtdItensVendidos$Quantidade, na.rm = TRUE)
# Média de Quantidade:
mean(qtdItensVendidos$Quantidade, na.rm = TRUE)
# Mediana de Quantidade:
median(sort(qtdItensVendidos$Quantidade, na.rm = TRUE))
itensVendidos$Quantidade
# 6)
itensVendidos = read.xlsx("restaurante.xlsx", 1)
(itensVendidos)
itensVendidos$Quantidade
qtd_itens = itensVendidos$Quantidade
# Mediana de Quantidade:
sort(qtd_itens)
# Mediana de Quantidade:
median(sort(qtd_itens), na.rm = TRUE)
# Média de Quantidade:
mean(qtd_itens, na.rm = TRUE)
summary(qtd_itens)
# Moda de Quantidade:
qtd_itens[qtd_itens == max(qtd_itens)]
# Moda de Quantidade:
q = table(qtd_itens)
# Moda de Quantidade:
q = table(qtd_itens)
q[q == max(q)]
qtd_itens = itensVendidos$Quantidade
(qtd_itens)
z = table(as.vector(qtd_itens)) names(z) [z == max (z)]
z = table(as.vector(qtd_itens)) names(z) [z == max (z)]
n = c(1,2,2,2,3,3)
moda = function(x) {}
moda = function(x) {
z = table(as.vector(x)) names(z)[z == max(z)]
z = table(as.vector(x))[z == max(z)]
t = table(n)
t[t == max(t)]
n = c(1,2,3,3,2,4,5,3)
t = table(n)
t[t == max(t)]
n = c(1,2,3,3,2,4,5,3,2)
t = table(n)
t[t == max(t)]
# Variância de Quantidade:
var(qtd_itens)
# Variância de Quantidade:
var(qtd_itens, na.rm = TRUE)
summary(qtd_itens)
# Desvio Padrão de Quantidade:
sd(qtd_itens, na.rm = TRUE)
source('~/Desenvolvimento/estudos.git/CienciasDosDados/pos-ver/atividade_final.r', echo=TRUE)
source('~/Desenvolvimento/estudos.git/CienciasDosDados/pos-ver/atividade_final.r', echo=TRUE)
library("prob", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
# 7) Calcule as probabilidades dos seguintes eventos. Para cada letra crie o espaço amostral e o
# evento desejado.
# 7.a) Obter três caras, sem importar a ordem, nos 6 lançamentos de uma moeda justa.
espaco_amostral_7a = tosscoin(6)
(espaco_amostral_7a)
tosscoin(1)
tosscoin(2)
tosscoin(3)
2 ^ 1
2 ^ 2
2 ^ 3
2 ^ 6
s12 = tosscoin(2, makespace = TRUE)
s12
probx = probspace(rolldie(1), probs = c(6, 36, 6, 6, 6, 40))
probx
# 7) Calcule as probabilidades dos seguintes eventos.
# Para cada letra crie o espaço amostral e o
# evento desejado.
# 7.a) Obter três caras, sem importar a ordem, nos 6 lançamentos de uma moeda justa.
espaco_amostral_7a = tosscoin(6)
(espaco_amostral_7a)
# 7) Calcule as probabilidades dos seguintes eventos.
# Para cada letra crie o espaço amostral e o
# evento desejado.
# 7.a) Obter três caras, sem importar a ordem, nos 6 lançamentos de uma moeda justa.
espaco_amostral_7a = tosscoin(6, makespace = TRUE)
(espaco_amostral_7a)
isrep(espaco_amostral_7a, vals = "T", nrep = 3)
# 7) Calcule as probabilidades dos seguintes eventos.
# Para cada letra crie o espaço amostral e o
# evento desejado.
# 7.a) Obter três caras, sem importar a ordem, nos 6 lançamentos de uma moeda justa.
espaco_amostral_7a = tosscoin(6)
(espaco_amostral_7a)
isrep(espaco_amostral_7a, vals = "T", nrep = 3)
# 7) Calcule as probabilidades dos seguintes eventos.
# Para cada letra crie o espaço amostral e o
# evento desejado.
# 7.a) Obter três caras, sem importar a ordem, nos 6 lançamentos de uma moeda justa.
espaco_amostral_7a = tosscoin(6)
(espaco_amostral_7a)
evento_7a = subset(isrep(espaco_amostral_7a, vals = "T", nrep = 3))
(evento_7a)
evento_7a = subset(espaco_amostral_7a, isrep(espaco_amostral_7a, vals = "T", nrep = 3))
(evento_7a)
Prob(evento_7a)
# 7) Calcule as probabilidades dos seguintes eventos.
# Para cada letra crie o espaço amostral e o
# evento desejado.
# 7.a) Obter três caras, sem importar a ordem, nos 6 lançamentos de uma moeda justa.
espaco_amostral_7a = tosscoin(6)
(espaco_amostral_7a)
evento_7a = subset(espaco_amostral_7a, isrep(espaco_amostral_7a, vals = "T", nrep = 3))
(evento_7a)
Prob(evento_7a)
probspace(evento_7a)
prob(evento_7a)
Prob(evento_7a)
Prob(evento_7a, espaco_amostral_7a)
Prob(espaco_amostral_7a, evento_7a)
1-evento_7a
# 7) Calcule as probabilidades dos seguintes eventos.
# Para cada letra crie o espaço amostral e o
# evento desejado.
# 7.a) Obter três caras, sem importar a ordem, nos 6 lançamentos de uma moeda justa.
espaco_amostral_7a = tosscoin(6)
(espaco_amostral_7a)
evento_7a = subset(espaco_amostral_7a, isrep(espaco_amostral_7a, vals = "T", nrep = 3))
(evento_7a)
n = 1 - evento_7a
probabilidade = length(evento_7a)
dim(evento_7a)
nrow(evento_7a)
probabilidade = nrow(evento_7a)
probabilidade = nrow(evento_7a) / nrow(espaco_amostral_7a)
(probabilidade)
# 7) Calcule as probabilidades dos seguintes eventos.
# Para cada letra crie o espaço amostral e o
# evento desejado.
# 7.a) Obter três caras, sem importar a ordem, nos 6 lançamentos de uma moeda justa.
espaco_amostral_7a = tosscoin(6)
(espaco_amostral_7a)
evento_7a = subset(espaco_amostral_7a, isrep(espaco_amostral_7a, vals = "H", nrep = 3))
(evento_7a)
iidspace(t(tosscoin(7)), ntrials = 1, probs = c(0.75, 0.25))
iidspace(t(tosscoin(7)), ntrials = 7, probs = c(0.75, 0.25))
iidspace(tosscoin(7), ntrials = 1, probs = c(0.75, 0.25))
# 7.b) Obter quatro coroas, sem importar a ordem, no lançamento de 7 vezes de uma moeda
# com p_cara = 0.75 e p_coroa= 0.25. Use a função iidspace para criar as probabilidades.
espaco_amostral_7b = iidspace(c("H", "T"), ntrials = 7, probs = c(0.75, 0.25))
(espaco_amostral_7b)
2 ^7
2 ^6
s = tosscoin(7)
s
evento_7b = subset(espaco_amostral_7b, isrep(espaco_amostral_7b, vals = "T", nrep = 4))
(evento_7b)
# 7.b) Obter quatro coroas, sem importar a ordem, no lançamento de 7 vezes de uma moeda
# com p_cara = 0.75 e p_coroa= 0.25. Use a função iidspace para criar as probabilidades.
espaco_amostral_7b = iidspace(c("H", "T"), ntrials = 7, probs = c(0.75, 0.25))
(espaco_amostral_7b)
evento_7b = subset(espaco_amostral_7b, isrep(espaco_amostral_7b, vals = "T", nrep = 4))
(evento_7b)
probabilidade_7b = nrow(evento_7b) / nrow(espaco_amostral_7b)
(probabilidade_7b)
# 7.3) Obter a soma do resultado do lançamento de 4 vezes de um dado com 8 faces maior que 23.
s7.3=rolldie(3, nsides = 4, makespace = TRUE)
# 7.c) Obter a soma do resultado do lançamento de 4 vezes de um dado com 8 faces maior que 23.
s7.c=rolldie(4, nsides = 8, makespace = TRUE)
(s7.c)
# 7.c) Obter a soma do resultado do lançamento de 4 vezes de um dado com 8 faces maior que 23.
s7.c=rolldie(4, nsides = 8, makespace = TRUE)
(s7.c)
espaco_amostral_7c = addrv(s7.c, U=X1+X2+X3+X4)
head(espaco_amostral_7c)
View(espaco_amostral_7c)
# 7.b) Obter quatro coroas, sem importar a ordem, no lançamento de 7 vezes de uma moeda
# com p_cara = 0.75 e p_coroa= 0.25. Use a função iidspace para criar as probabilidades.
espaco_amostral_7b = iidspace(c("H", "T"), ntrials = 7, probs = c(0.75, 0.25))
(espaco_amostral_7b)
evento_7b = subset(espaco_amostral_7b, isrep(espaco_amostral_7b, vals = "T", nrep = 4))
(evento_7b)
probabilidade_7b = nrow(evento_7b) / nrow(espaco_amostral_7b)
(probabilidade_7b)
# 7.c) Obter a soma do resultado do lançamento de 4 vezes de um dado com 8 faces maior que 23.
s7.c = rolldie(4, nsides = 8, makespace = TRUE)
(s7.c)
espaco_amostral_7c = addrv(s7.c, U=X1+X2+X3+X4)
head(espaco_amostral_7c)
probabilidade_7c = Prob(espaco_amostral_7c, U > 23)
(probabilidade_7c)
# 7.d) Obter uma carta (qualquer naipe) de valor entre 5 e 9 na retirada de um baralho com os
# coringas presentes.
espaco_amostral_7d = cards(jokers = TRUE)
(espaco_amostral_7d)
evento_7d = subset(espaco_amostral_7d, rank %in% 5:9)
(evento_7d)
# 7.d) Obter uma carta (qualquer naipe) de valor entre 5 e 9 na retirada de um baralho com os
# coringas presentes.
espaco_amostral_7d = cards(makespace = TRUE, jokers = TRUE)
(espaco_amostral_7d)
evento_7d = subset(espaco_amostral_7d, rank %in% 5:9)
(evento_7d)
Prob(evento_7d)
p = nrow(evento_7d) / nrow(espaco_amostral_7d)
p
Prob(evento_7b)
(probabilidade_7b)
Prob(evento_7a)
# 7.e) Considere três lançamentos de um dado justo de seis faces. Evento A (valores iguais) e
# B (soma dos valores menor ou igual a 12). Calcule P(A|B) e P(B|A).
s22=rolldie(3, nsides = 6, makespace = TRUE)
(s22)
6 ^3
evento_a_7e = subset(espaco_amostral_7e, X1 == X2 == X3)
(2 + 2 + 2) %% 3
(1 + 2 + 2) %% 3
(1 + 1 + 1) %% 3
(1 + 5 + 1) %% 3
(5 + 5 + 5) %% 3
(5 + 5 + 6) %% 3
(3 + 5 + 6) %% 3
(2 + 5 + 6) %% 3
(3 + 5 + 6) %% 3
(3 + 6 + 6) %% 3
# 7.e) Considere três lançamentos de um dado justo de seis faces. Evento A (valores iguais) e
# B (soma dos valores menor ou igual a 12). Calcule P(A|B) e P(B|A).
espaco_amostral_7e = rolldie(3, nsides = 6, makespace = TRUE)
(espaco_amostral_7e)
evento_a_7e = subset(espaco_amostral_7e, X1 == X2)
(evento_a_7e)
evento_a_7e = subset(espaco_amostral_7e, X1 == X2 && X2 == X3)
(evento_a_7e)
evento_a_7e = subset(espaco_amostral_7e, all(X1 == X2))
(evento_a_7e)
heap(subset())
help(subset())
help(subset)
?subset
example(subset)
evento_a_7e = subset(espaco_amostral_7e, X1 == X2 & X2 == X3)
(evento_a_7e)
evento_b_7e = subset(s17, X1 + X2 + X3 <= 12)
(evento_b_7e)
evento_a_7e = subset(espaco_amostral_7e, X1 == X2 & X2 == X3)
(evento_a_7e)
evento_b_7e = subset(s17, X1 + X2 + X3 <= 12)
evento_b_7e = subset(espaco_amostral_7e, X1 + X2 + X3 <= 12)
(evento_b_7e)
Prob(evento_a_7e, given = evento_b_7e)
Prob(evento_b_7e, given = evento_a_7e)
data("cars")
cars
source('~/Desenvolvimento/estudos.git/CienciasDosDados/pos-ver/atividade_final.r', echo=TRUE)
q()
